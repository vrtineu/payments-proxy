services:
  app1: &app
    build:
      context: .
    environment:
      - REDIS_ADDR=redis:6379
      - DEFAULT_GATEWAY_URL=http://payment-processor-default:8080
      - FALLBACK_GATEWAY_URL=http://payment-processor-fallback:8080
    networks:
      - backend
      - payment-processor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.60"
          memory: "150MB"

  app2:
    <<: *app

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --save "" --appendonly no --maxclients 20000
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "50MB"

  haproxy:
    image: haproxy:3.1.7
    depends_on:
      app1:
        condition: service_healthy
      app2:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "9999:9999"
    healthcheck:
      test: |
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/9797; echo -e "GET / HTTP/1.1\nConnection: close\n" >&3; cat <&3 | grep -q "200 OK"'
      interval: 15s
      timeout: 15s
      start_period: 30s
      start_interval: 1s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "55MB"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg

networks:
  backend:
    driver: bridge
  payment-processor:
    external: true
